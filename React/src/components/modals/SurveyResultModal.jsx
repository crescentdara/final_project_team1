import React, { useState } from "react";
import NaverMap from "../NaverMap.jsx";
import RejectReasonModal from "./RejectReasonModal.jsx"; // ‚úÖ Ï∂îÍ∞Ä

const titleAddress = (it) =>
    (it?.lotAddress || it?.roadAddress || it?.address || "-");

const label = {
    possible: "Ï°∞ÏÇ¨ Í∞ÄÎä• Ïó¨Î∂Ä",
    adminUse: "ÌñâÏ†ïÎ™©Ï†Å ÌôúÏö©",
    idleRate: "Ïú†Ìú¥ ÎπÑÏú®",
    safety: "ÏïàÏ†Ñ Îì±Í∏â",
    wall: "Ïô∏Î≤Ω ÏÉÅÌÉú",
    roof: "Ïò•ÏÉÅ ÏÉÅÌÉú",
    windowState: "Ï∞ΩÌò∏ ÏÉÅÌÉú",
    parking: "Ï£ºÏ∞® Í∞ÄÎä•",
    entrance: "ÌòÑÍ¥Ä ÏÉÅÌÉú",
    ceiling: "Ï≤úÏû• ÏÉÅÌÉú",
    floor: "Î∞îÎã• ÏÉÅÌÉú",
};

const codeText = {
    possible: (v) => (v === 1 ? "Í∞ÄÎä•" : v === 2 ? "Î∂àÍ∞Ä" : "-"),
    adminUse: (v) => ({ 1: "ÌôúÏö©", 2: "ÏùºÎ∂ÄÌôúÏö©", 3: "ÎØ∏ÌôúÏö©" }[v] ?? "-"),
    idleRate: (v) =>
        ({ 1: "0~10%", 2: "10~30%", 3: "30~50%", 4: "50%+" }[v] ?? "-"),
    safety: (v) => ({ 1: "A", 2: "B", 3: "C", 4: "D", 5: "E" }[v] ?? "-"),
    wall: (v) => ({ 1: "ÏñëÌò∏", 2: "Î≥¥ÌÜµ", 3: "Î∂àÎüâ" }[v] ?? "-"),
    roof: (v) => ({ 1: "ÏñëÌò∏", 2: "Î≥¥ÌÜµ", 3: "Î∂àÎüâ" }[v] ?? "-"),
    windowState: (v) => ({ 1: "ÏñëÌò∏", 2: "Î≥¥ÌÜµ", 3: "Î∂àÎüâ" }[v] ?? "-"),
    parking: (v) => (v === 1 ? "Í∞ÄÎä•" : v === 2 ? "Î∂àÍ∞Ä" : "-"),
    entrance: (v) => ({ 1: "ÏñëÌò∏", 2: "Î≥¥ÌÜµ", 3: "Î∂àÎüâ" }[v] ?? "-"),
    ceiling: (v) => ({ 1: "ÏñëÌò∏", 2: "Î≥¥ÌÜµ", 3: "Î∂àÎüâ" }[v] ?? "-"),
    floor: (v) => ({ 1: "ÏñëÌò∏", 2: "Î≥¥ÌÜµ", 3: "Î∂àÎüâ" }[v] ?? "-"),
};

export default function SurveyResultModal({
                                        open,
                                        item,
                                        loading,
                                        error,
                                        onClose,
                                        onApprove,
                                        onReject,
                                    }) {
    const [showRejectModal, setShowRejectModal] = useState(false);

    if (!open) return null;

    return (
        <>
            <div
                className="modal d-block"
                tabIndex="-1"
                style={{ background: "rgba(0,0,0,.35)" }}
            >
                <div className="modal-dialog modal-xl modal-dialog-scrollable">
                    <div className="modal-content">
                      <div className="modal-header">
                        <h5
                            className="modal-title text-truncate"
                            title={titleAddress(item)}
                            style={{ maxWidth: "calc(100% - 40px)" }} // Îã´Í∏∞ Î≤ÑÌäº Ìè≠ÎßåÌÅº Ï§ÑÏó¨ÏÑú ÎßêÏ§ÑÏûÑ ÏïàÏ†Ñ
                        >
                          {titleAddress(item)}
                        </h5>
                        <button type="button" className="btn-close" onClick={onClose} />
                      </div>

                        <div className="modal-body">
                            {/* Î°úÎî©/ÏóêÎü¨ ÏÉÅÌÉú */}
                            {loading && (
                                <div className="text-center py-5">Î∂àÎü¨Ïò§Îäî Ï§ë...</div>
                            )}
                            {!loading && error && (
                                <div className="alert alert-danger">{error}</div>
                            )}

                            {/* Î≥∏Î¨∏ */}
                            {!loading && !error && item && (
                                <>
                                    {/* ÏÉÅÎã® ÏöîÏïΩ */}
                                    <div className="mb-3">
                                        <div className="fw-semibold">
                                            {item.investigator ?? "-"}
                                        </div>
                                        <div className="text-muted small">
                                            ÏÉÅÌÉú: {item.status ?? "-"}
                                        </div>
                                    </div>

                                    {/* Ïà´ÏûêÌòï ÏΩîÎìú ‚Üí ÌÖçÏä§Ìä∏ Îß§Ìïë Ìëú */}
                                    <table className="table table-sm align-middle">
                                        <thead>
                                        <tr className="table-light">
                                            <th style={{ width: 220 }}>Ìï≠Î™©</th>
                                            <th>Í∞í</th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        {[
                                            "possible",
                                            "adminUse",
                                            "idleRate",
                                            "safety",
                                            "wall",
                                            "roof",
                                            "windowState",
                                            "parking",
                                            "entrance",
                                            "ceiling",
                                            "floor",
                                        ].map((k) => (
                                            <tr key={k}>
                                                <th className="text-muted">{label[k]}</th>
                                                <td>{codeText[k](item[k])}</td>
                                            </tr>
                                        ))}
                                        </tbody>
                                    </table>

                                    {/* ÏÇ¨ÏßÑ ÎØ∏Î¶¨Î≥¥Í∏∞ */}
                                    <div className="row g-3">
                                        {[
                                            { key: "extPhoto", title: "Ïô∏Î∂Ä ÏÇ¨ÏßÑ" },
                                            { key: "extEditPhoto", title: "Ïô∏Î∂Ä Ìé∏Ïßë" },
                                            { key: "intPhoto", title: "ÎÇ¥Î∂Ä ÏÇ¨ÏßÑ" },
                                            { key: "intEditPhoto", title: "ÎÇ¥Î∂Ä Ìé∏Ïßë" },
                                        ].map(({ key, title }) => (
                                            <div className="col-md-3" key={key}>
                                                <div className="border rounded p-2 h-100">
                                                    <div className="small text-muted mb-2">{title}</div>
                                                    {item[key] ? (
                                                        <img
                                                            src={item[key]}
                                                            alt={title}
                                                            className="img-fluid rounded"
                                                            style={{
                                                                objectFit: "cover",
                                                                width: "100%",
                                                                height: 180,
                                                            }}
                                                            onError={(e) => {
                                                                e.currentTarget.style.opacity = 0.4;
                                                                e.currentTarget.alt = "Ïù¥ÎØ∏ÏßÄ ÏóÜÏùå";
                                                            }}
                                                        />
                                                    ) : (
                                                        <div className="text-muted small">Ïù¥ÎØ∏ÏßÄ ÏóÜÏùå</div>
                                                    )}
                                                </div>
                                            </div>
                                        ))}
                                    </div>

                                    {/* üîπ ÏßÄÎèÑ ÌëúÏãú */}
                                    <div className="mt-4">
                                        <h6 className="fw-semibold mb-2">ÏúÑÏπò</h6>
                                        {item.latitude && item.longitude ? (
                                            <NaverMap
                                                latitude={item.latitude}
                                                longitude={item.longitude}
                                            />
                                        ) : (
                                            <div className="text-muted small">ÏúÑÏπò Ï†ïÎ≥¥ ÏóÜÏùå</div>
                                        )}
                                    </div>
                                </>
                            )}
                        </div>

                        <div className="modal-footer">
                            <button
                                className="btn btn-success"
                                onClick={() => onApprove(item?.id)}
                                disabled={!item || loading}
                            >
                                ÏäπÏù∏
                            </button>
                            <button
                                className="btn btn-danger"
                                onClick={() => setShowRejectModal(true)} // ‚úÖ Î∞òÎ†§ Î™®Îã¨ Ïó¥Í∏∞
                                disabled={!item || loading}
                            >
                                Î∞òÎ†§
                            </button>
                            <button
                                className="btn btn-outline-secondary"
                                onClick={onClose}
                            >
                                Îã´Í∏∞
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            {/* üîπ Î∞òÎ†§ ÏÇ¨Ïú† ÏûÖÎ†• Î™®Îã¨ */}
            <RejectReasonModal
                open={showRejectModal}
                onClose={() => setShowRejectModal(false)}
                onSubmit={(reason) => {
                    onReject(item?.id, reason); // Î∂ÄÎ™®ÏóêÏÑú axios Ìò∏Ï∂ú Ï≤òÎ¶¨
                    setShowRejectModal(false);
                }}
            />
        </>
    );
}
